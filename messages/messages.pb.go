// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	DataTuple
	MessageData
	N3Message
	SignedN3Message
	SyncRequest
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// core message type for lowest-level data tuples
type DataTuple struct {
	Subject   string `protobuf:"bytes,1,opt,name=Subject" json:"Subject,omitempty"`
	Object    string `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
	Predicate string `protobuf:"bytes,3,opt,name=Predicate" json:"Predicate,omitempty"`
	Version   uint64 `protobuf:"varint,4,opt,name=Version" json:"Version,omitempty"`
	Context   string `protobuf:"bytes,5,opt,name=Context" json:"Context,omitempty"`
}

func (m *DataTuple) Reset()                    { *m = DataTuple{} }
func (m *DataTuple) String() string            { return proto.CompactTextString(m) }
func (*DataTuple) ProtoMessage()               {}
func (*DataTuple) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataTuple) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *DataTuple) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *DataTuple) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func (m *DataTuple) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DataTuple) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

// p2p message meta-data designed to be shared between all app protocols
type MessageData struct {
	// shared between all requests
	ClientVersion string `protobuf:"bytes,1,opt,name=clientVersion" json:"clientVersion,omitempty"`
	Timestamp     int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Id            string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Gossip        bool   `protobuf:"varint,4,opt,name=gossip" json:"gossip,omitempty"`
	NodeId        string `protobuf:"bytes,5,opt,name=nodeId" json:"nodeId,omitempty"`
	NodePubKey    []byte `protobuf:"bytes,6,opt,name=nodePubKey,proto3" json:"nodePubKey,omitempty"`
}

func (m *MessageData) Reset()                    { *m = MessageData{} }
func (m *MessageData) String() string            { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()               {}
func (*MessageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MessageData) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *MessageData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MessageData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MessageData) GetGossip() bool {
	if m != nil {
		return m.Gossip
	}
	return false
}

func (m *MessageData) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *MessageData) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

// core message exchanged between peers for replication
type N3Message struct {
	MessageData *MessageData `protobuf:"bytes,1,opt,name=messageData" json:"messageData,omitempty"`
	PrevHash    string       `protobuf:"bytes,2,opt,name=prevHash" json:"prevHash,omitempty"`
	Sequence    uint64       `protobuf:"varint,3,opt,name=sequence" json:"sequence,omitempty"`
	MsgHash     string       `protobuf:"bytes,4,opt,name=msgHash" json:"msgHash,omitempty"`
	DataTuple   *DataTuple   `protobuf:"bytes,5,opt,name=dataTuple" json:"dataTuple,omitempty"`
}

func (m *N3Message) Reset()                    { *m = N3Message{} }
func (m *N3Message) String() string            { return proto.CompactTextString(m) }
func (*N3Message) ProtoMessage()               {}
func (*N3Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *N3Message) GetMessageData() *MessageData {
	if m != nil {
		return m.MessageData
	}
	return nil
}

func (m *N3Message) GetPrevHash() string {
	if m != nil {
		return m.PrevHash
	}
	return ""
}

func (m *N3Message) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *N3Message) GetMsgHash() string {
	if m != nil {
		return m.MsgHash
	}
	return ""
}

func (m *N3Message) GetDataTuple() *DataTuple {
	if m != nil {
		return m.DataTuple
	}
	return nil
}

// signed wrapper for messages
type SignedN3Message struct {
	N3Message *N3Message `protobuf:"bytes,1,opt,name=n3message" json:"n3message,omitempty"`
	Signature string     `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (m *SignedN3Message) Reset()                    { *m = SignedN3Message{} }
func (m *SignedN3Message) String() string            { return proto.CompactTextString(m) }
func (*SignedN3Message) ProtoMessage()               {}
func (*SignedN3Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignedN3Message) GetN3Message() *N3Message {
	if m != nil {
		return m.N3Message
	}
	return nil
}

func (m *SignedN3Message) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// Sync (replication) request message
type SyncRequest struct {
	// the name of the context data is being requested for
	Context string `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	// map of the ledger state on the requesting peer
	// used to ensure only relevant data is sent
	// during replication
	LedgerDigest map[string]uint64 `protobuf:"bytes,2,rep,name=ledgerDigest" json:"ledgerDigest,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// the p2p id of the requestor
	SourceId string `protobuf:"bytes,3,opt,name=sourceId" json:"sourceId,omitempty"`
	// the p2p id of the node to sync with
	TargetId string `protobuf:"bytes,4,opt,name=targetId" json:"targetId,omitempty"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SyncRequest) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *SyncRequest) GetLedgerDigest() map[string]uint64 {
	if m != nil {
		return m.LedgerDigest
	}
	return nil
}

func (m *SyncRequest) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *SyncRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func init() {
	proto.RegisterType((*DataTuple)(nil), "messages.DataTuple")
	proto.RegisterType((*MessageData)(nil), "messages.MessageData")
	proto.RegisterType((*N3Message)(nil), "messages.N3Message")
	proto.RegisterType((*SignedN3Message)(nil), "messages.SignedN3Message")
	proto.RegisterType((*SyncRequest)(nil), "messages.SyncRequest")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0x95, 0x36, 0x5b, 0x9a, 0xc9, 0xb2, 0x80, 0xf9, 0x50, 0xb4, 0x42, 0xa8, 0x8a, 0x90,
	0xe8, 0xa9, 0xd2, 0xb6, 0x07, 0x10, 0x17, 0x0e, 0x2c, 0x12, 0xab, 0xe5, 0x63, 0xe5, 0x22, 0xee,
	0x69, 0x3c, 0x0a, 0x86, 0xc6, 0x09, 0xb6, 0xb3, 0xa2, 0x4f, 0xc1, 0xb3, 0xf0, 0x18, 0x3c, 0x0c,
	0xef, 0x80, 0xfc, 0x91, 0x38, 0xab, 0xbd, 0xe5, 0x37, 0x33, 0x1e, 0xff, 0xff, 0x33, 0x0e, 0x9c,
	0xd4, 0xa8, 0x54, 0x51, 0xa1, 0x5a, 0xb5, 0xb2, 0xd1, 0x0d, 0x99, 0xf7, 0x9c, 0xff, 0x8e, 0x20,
	0x39, 0x2f, 0x74, 0xf1, 0xa5, 0x6b, 0xf7, 0x48, 0x32, 0xb8, 0xb3, 0xed, 0x76, 0xdf, 0xb1, 0xd4,
	0x59, 0xb4, 0x88, 0x96, 0x09, 0xed, 0x91, 0x3c, 0x81, 0xd9, 0x67, 0x97, 0x98, 0xd8, 0x84, 0x27,
	0xf2, 0x14, 0x92, 0x2b, 0x89, 0x8c, 0x97, 0x85, 0xc6, 0x6c, 0x6a, 0x53, 0x21, 0x60, 0xfa, 0x7d,
	0x45, 0xa9, 0x78, 0x23, 0xb2, 0x78, 0x11, 0x2d, 0x63, 0xda, 0xa3, 0xc9, 0xbc, 0x6d, 0x84, 0xc6,
	0x5f, 0x3a, 0x3b, 0x72, 0x37, 0x79, 0xcc, 0xff, 0x44, 0x90, 0x7e, 0x74, 0xf2, 0x8c, 0x30, 0xf2,
	0x1c, 0xee, 0x96, 0x7b, 0x8e, 0x42, 0xf7, 0x9d, 0x9c, 0xb2, 0x9b, 0x41, 0xa3, 0x43, 0xf3, 0x1a,
	0x95, 0x2e, 0xea, 0xd6, 0x4a, 0x9c, 0xd2, 0x10, 0x20, 0x27, 0x30, 0xe1, 0xcc, 0xcb, 0x9b, 0x70,
	0x66, 0xdc, 0x54, 0x8d, 0x52, 0xbc, 0xb5, 0xb2, 0xe6, 0xd4, 0x93, 0x89, 0x8b, 0x86, 0xe1, 0x05,
	0xf3, 0xa2, 0x3c, 0x91, 0x67, 0x00, 0xe6, 0xeb, 0xaa, 0xdb, 0x5d, 0xe2, 0x21, 0x9b, 0x2d, 0xa2,
	0xe5, 0x31, 0x1d, 0x45, 0xf2, 0xbf, 0x11, 0x24, 0x9f, 0x36, 0x5e, 0x35, 0x79, 0x09, 0x69, 0x1d,
	0x0c, 0x58, 0xbd, 0xe9, 0xfa, 0xf1, 0x6a, 0xd8, 0xc1, 0xc8, 0x1d, 0x1d, 0x57, 0x92, 0x53, 0x98,
	0xb7, 0x12, 0xaf, 0xdf, 0x17, 0xea, 0x9b, 0x1f, 0xf3, 0xc0, 0x26, 0xa7, 0xf0, 0x67, 0x87, 0xa2,
	0x74, 0x73, 0x8e, 0xe9, 0xc0, 0x66, 0x98, 0xb5, 0xaa, 0xec, 0xb1, 0xd8, 0x0d, 0xd3, 0x23, 0x39,
	0x83, 0x84, 0xf5, 0xdb, 0xb5, 0x9e, 0xd2, 0xf5, 0xc3, 0x20, 0x64, 0x58, 0x3c, 0x0d, 0x55, 0xf9,
	0x0e, 0xee, 0x6d, 0x79, 0x25, 0x90, 0x05, 0x43, 0x67, 0x90, 0x88, 0x8d, 0x3f, 0xe5, 0xed, 0x8c,
	0xba, 0x0c, 0x75, 0x34, 0x54, 0x99, 0x7d, 0x28, 0x5e, 0x89, 0x42, 0x77, 0x12, 0xbd, 0x97, 0x10,
	0xc8, 0xff, 0x45, 0x90, 0x6e, 0x0f, 0xa2, 0xa4, 0xc6, 0x81, 0xd2, 0xc6, 0x40, 0xe9, 0x5f, 0x83,
	0x7f, 0x77, 0x1e, 0xc9, 0x25, 0x1c, 0xef, 0x91, 0x55, 0x28, 0xcf, 0x79, 0x85, 0xca, 0xbc, 0xbe,
	0xe9, 0x32, 0x5d, 0xbf, 0x08, 0xb7, 0x8f, 0xda, 0xac, 0x3e, 0x8c, 0x2a, 0xdf, 0x09, 0x2d, 0x0f,
	0xf4, 0xc6, 0x61, 0x3b, 0xc3, 0xa6, 0x93, 0xa5, 0x59, 0xb0, 0x7b, 0x0c, 0x03, 0x9b, 0x9c, 0x2e,
	0x64, 0x85, 0xfa, 0x82, 0xf9, 0x21, 0x0e, 0x7c, 0xfa, 0x06, 0x1e, 0xdc, 0x6a, 0x4d, 0xee, 0xc3,
	0xf4, 0x07, 0x1e, 0xbc, 0x5e, 0xf3, 0x49, 0x1e, 0xc1, 0xd1, 0x75, 0xb1, 0xef, 0x9c, 0xdf, 0x98,
	0x3a, 0x78, 0x3d, 0x79, 0x15, 0xed, 0x66, 0xf6, 0xb7, 0xdb, 0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x5d, 0xaa, 0x03, 0x63, 0x88, 0x03, 0x00, 0x00,
}
