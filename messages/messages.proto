// messages.proto

// protobuf message strucutres used by N3


syntax = "proto3";

package messages;

// core message type for lowest-level data tuples
message DataTuple {
	string Subject = 1; 	//e.g. Refid of a SIF object
	string Object = 2; 		//e.g. Attribute name of a SIF object
	string Predicate = 3; 	//e.g Value of an attribute
	uint64 Version = 4; 	//latest known version of this tuple
	string Context = 5;		//model/domain context for this tuple
}

// p2p message meta-data designed to be shared between all app protocols
message MessageData {
    // shared between all requests
    string clientVersion = 1; 	// client version
    int64 timestamp = 2;     	// unix time
    string id = 3;           	// allows requesters to use request data when processing a response
    bool gossip = 4;         	// true to have receiver peer gossip the message to neighbors
    string nodeId = 5;       	// id of node that created the message (not the peer that may have sent it). =base58(mh(sha256(nodePubKey)))
    bytes nodePubKey = 6;    	// Authoring node Secp256k1 public key (32bytes) - protobufs serielized
}


// core message exchanged between peers for replication
message N3Message {
	MessageData messageData = 1; 	// standard meta-data header for all mesasges
	string prevHash = 2; 			// sha256 hash of the previous message in the sig-chain
	uint64 sequence = 3; 			// the sequence number of this message in the author's feed
	string msgHash = 4; 			// the sha256 hash of this message
	DataTuple dataTuple = 5; 		// the underlying data tuple this message contains
}

// signed wrapper for messages
message SignedN3Message {
	N3Message n3message = 1; 	// an n3 message complete
	string signature = 2; 		// pki signature to validate sender & content
}

// Sync (replication) request message
message SyncRequest {
	// the name of the context data is being requested for
	string context = 1;
	// map of the ledger state on the requesting peer
	// used to ensure only relevant data is sent 
	// during replication
	map<string, uint64> ledgerDigest = 2; 
	// the p2p id of the requestor
	string sourceId = 3;
	// the p2p id of the node to sync with
	string targetId = 4;
}









